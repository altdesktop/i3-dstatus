#!/usr/bin/env python3

from i3dstatus.block import Block, get_interface_definition

from dbus_next.aio import MessageBus
from dbus_next import BusType
import sys
import os
import asyncio
import copy

block = Block(os.path.basename(__file__))
bus = MessageBus(bus_type=BusType.SYSTEM)

context = {'name': '', 'percentage': 0.0, 'icon': ''}


def state_to_icon(state, percentage):
    '''https://upower.freedesktop.org/docs/Device.html'''
    if state == 0:
        # unknown
        return ''
    elif state == 1:
        # charging
        return '🔌'
    elif state == 2:
        # discharging
        if percentage < 10.0:
            return '⚠️'
        else:
            return '🔋'
    elif state == 3:
        # empty
        return '🚫'
    elif state == 4:
        # fully charged
        return '⚡'
    elif state == 5:
        # pending charged (?)
        return '🔌'
    elif state == 6:
        # pending discharge (?)
        if percentage < 10.0:
            return '⚠️'
        else:
            return '🔋'
    return ''


async def update_status(properties, battery_format, battery_name):
    global context
    new_context = copy.deepcopy(context)

    if 'Percentage' in properties:
        new_context['percentage'] = round(properties['Percentage'].value)

    if 'State' in properties:
        percentage = new_context['percentage']
        new_context['icon'] = state_to_icon(properties['State'].value, percentage)

    if new_context == context:
        return

    await block.show(battery_format, markup='pango', context=new_context)
    context = new_context


async def main(loop):
    upower_device_xml = get_interface_definition('org.freedesktop.UPower.Device')
    await asyncio.gather(bus.connect(), block.connect())

    battery_format = '%percentage%'
    battery_path = '/org/freedesktop/UPower/devices/DisplayDevice'
    name = 'DisplayDevice'

    if 'format' in block.config:
        battery_format = block.config['format']

    if 'name' in block.config:
        name = block.config['name']
        battery_path = '/org/freedesktop/UPower/devices/battery_' \
                + name
    else:
        battery_path = '/org/freedesktop/UPower/devices/DisplayDevice'

    battery_obj = bus.get_proxy_object('org.freedesktop.UPower', battery_path, upower_device_xml)

    battery_properties = battery_obj.get_interface('org.freedesktop.DBus.Properties')

    properties = await battery_properties.call_get_all('org.freedesktop.UPower.Device')

    await update_status(properties, battery_format, name)

    def signal_handler(interface, properties, invalidated):
        # TODO handle more properties
        handled_properties = ['Percentage', 'State']
        if any(item in properties for item in handled_properties):
            asyncio.ensure_future(update_status(properties, battery_format, name))

    battery_properties.on_properties_changed(signal_handler)

    await block.wait_for_disconnect()


loop = asyncio.get_event_loop()
loop.run_until_complete(main(loop))
