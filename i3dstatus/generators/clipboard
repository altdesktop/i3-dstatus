#!/usr/bin/env python3

from i3dstatus.block import Block

from Xlib.display import Display
from Xlib.protocol import rq
from Xlib.ext import xfixes
from Xlib import X, Xatom

import html
import os
import sys
import asyncio

block = Block(os.path.basename(__file__))

truncate_length = 50
clipboard_format = '%text'


def format_clipboard_text(cb):
    if not cb:
        return ""

    cb = html.escape(cb.replace('\n', ''))

    if len(cb) > truncate_length:
        cb = cb[0:truncate_length].rstrip() + 'â€¦'

    return cb


async def main():
    global clipboard_format, truncate_length
    await block.connect()
    clipboard_format = block.config.get('format', clipboard_format)
    truncate_length = block.config.get('truncate-length', truncate_length)

    display = Display()
    root = display.screen().root

    if display.query_extension('XFIXES') is None:
        msg = 'XFIXES extension not supported'
        await block.error(msg)
        raise Exception(msg)

    display.xfixes_query_version()

    sel_atom = display.get_atom('CLIPBOARD')
    mask = xfixes.XFixesSetSelectionOwnerNotifyMask | \
           xfixes.XFixesSelectionWindowDestroyNotifyMask | \
           xfixes.XFixesSelectionClientCloseNotifyMask
    display.xfixes_select_selection_input(root, sel_atom, mask)

    data_atom = display.get_atom('XSEL_DATA')
    target_name = 'UTF8_STRING'
    target_atom = display.get_atom(target_name)

    data_window = root.create_window(0, 0, 10, 10, 0, X.CopyFromParent)
    data_window.convert_selection(sel_atom, target_atom, data_atom, X.CurrentTime)

    selection_sub_events = [
        display.extension_event.SetSelectionOwnerNotify,
        display.extension_event.SelectionWindowDestroyNotify,
        display.extension_event.SelectionClientCloseNotify
    ]

    while True:
        e = display.next_event()
        if e.type == X.SelectionNotify:
            prop = data_window.get_full_property(data_atom, X.AnyPropertyType, sizehint=10000)

            contents = ''
            if prop is not None:
                contents = prop.value.decode().strip()

            if contents:
                context = {'text': format_clipboard_text(contents)}
                await block.show(clipboard_format, markup='pango', context=context)
            else:
                await block.clear()
        elif (e.type, e.sub_code) in selection_sub_events:
            if e.owner.id:
                data_window.convert_selection(sel_atom, target_atom, data_atom, X.CurrentTime)
            else:
                await block.clear()


loop = asyncio.get_event_loop()
loop.run_until_complete(main())
